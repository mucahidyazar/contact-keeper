{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, CLEAR_CONTACTS, CONTACT_ERROR, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.paylaod,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACTS:\n      return { ...state,\n        current: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      //RegExp eslesmesini istedigimiz text olacak icine bulmasini istedigimiz texti belirtiyoruz ilk arguman olarak\n      //2. argument olarakda 'gi' buyuk ve kucuk argumentlerden etkilenme demekdir.\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, \"gi\");\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Mucahid Yazar/OneDrive/Desktop/some-projects/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","CLEAR_CONTACTS","CONTACT_ERROR","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","state","action","type","contacts","paylaod","loading","payload","map","contact","id","filter","current","filtered","error","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,cAJF,EAKEC,aALF,EAMEC,WANF,EAOEC,aAPF,EAQEC,cARF,EASEC,eATF,EAUEC,YAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,YAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACK,OAA3B,CAFL;AAGLD,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,cAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeI,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACK,OAAP,CAAeG,EAA9B,GAAmCR,MAAM,CAACK,OAA1C,GAAoDE,OAD5C,CAFL;AAKLH,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKb,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeO,MAAf,CACRF,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeR,MAAM,CAACK,OADzB,CAFL;AAKLD,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELW,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKjB,aAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELG,QAAAA,QAAQ,EAAE,IAFL;AAGLS,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLF,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKhB,WAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELW,QAAAA,OAAO,EAAEV,MAAM,CAACK;AAFX,OAAP;;AAKF,SAAKV,aAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELW,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAKF,SAAKb,eAAL;AACE;AACA;AACA,aAAO,EACL,GAAGE,KADE;AAELY,QAAAA,QAAQ,EAAEZ,KAAK,CAACG,QAAN,CAAeO,MAAf,CAAsBF,OAAO,IAAI;AACzC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACK,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELY,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF;AACE,aAAOZ,KAAP;AAtEJ;AAwED,CAzED","sourcesContent":["import {\r\n  GET_CONTACTS,\r\n  ADD_CONTACT,\r\n  DELETE_CONTACT,\r\n  CLEAR_CONTACTS,\r\n  CONTACT_ERROR,\r\n  SET_CURRENT,\r\n  CLEAR_CURRENT,\r\n  UPDATE_CONTACT,\r\n  FILTER_CONTACTS,\r\n  CLEAR_FILTER\r\n} from \"../types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case GET_CONTACTS:\r\n      return {\r\n        ...state,\r\n        contacts: action.paylaod,\r\n        loading: false\r\n      };\r\n    case ADD_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: [...state.contacts, action.payload],\r\n        loading: false\r\n      };\r\n    case UPDATE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.map(contact =>\r\n          contact.id === action.payload.id ? action.payload : contact\r\n        ),\r\n        loading: false\r\n      };\r\n    case DELETE_CONTACT:\r\n      return {\r\n        ...state,\r\n        contacts: state.contacts.filter(\r\n          contact => contact.id !== action.payload\r\n        ),\r\n        loading: false\r\n      };\r\n    case CLEAR_CONTACTS:\r\n      return {\r\n        ...state,\r\n        current: null\r\n      };\r\n    case CONTACT_ERROR:\r\n      return {\r\n        ...state,\r\n        contacts: null,\r\n        filtered: null,\r\n        error: null,\r\n        current: null\r\n      };\r\n    case SET_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: action.payload\r\n      };\r\n\r\n    case CLEAR_CURRENT:\r\n      return {\r\n        ...state,\r\n        current: null\r\n      };\r\n\r\n    case FILTER_CONTACTS:\r\n      //RegExp eslesmesini istedigimiz text olacak icine bulmasini istedigimiz texti belirtiyoruz ilk arguman olarak\r\n      //2. argument olarakda 'gi' buyuk ve kucuk argumentlerden etkilenme demekdir.\r\n      return {\r\n        ...state,\r\n        filtered: state.contacts.filter(contact => {\r\n          const regex = new RegExp(`${action.payload}`, \"gi\");\r\n          return contact.name.match(regex) || contact.email.match(regex);\r\n        })\r\n      };\r\n    case CLEAR_FILTER:\r\n      return {\r\n        ...state,\r\n        filtered: null\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}